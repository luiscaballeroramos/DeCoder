# -*- coding: utf-8 -*-
"""Te damos la bienvenida a Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/luiscaballeroramos/DeCoder/blob/EC3_1_8_DesignOfJoints/DeCoder_Auxiliary.ipynb
"""

import regex as re
from tabulate import tabulate

class TOC():
  def __init__(self,refidRegex,refsepRegex,refsep,namRegex,sepRegex,numRegex):
    self.refidRegex=refidRegex
    self.refsepRegex=refsepRegex
    self.refsep=refsep
    self.refRegex=refidRegex+'(?:'+refsepRegex+'{1}'+refidRegex+'+)+'
    self.namRegex=namRegex
    self.sepRegex=sepRegex
    self.numRegex=numRegex
    self.tocRegex=self.refRegex+'\s*'+namRegex+'\s*'+sepRegex+'\s*'+numRegex
    self.tocList=[]
    pass
  def addToc(self,toc):
    if len(list(x for x in self.tocList if x.ref == toc.ref)) == 0:
      self.tocList.append(toc)
      pass
    pass
  def printTOC(self,num=None):
    table=[]
    if num is None:
      for toc in TOC_EC3.tocList:
        table.append([toc.ref,toc.name,toc.begin.page,toc.level])
        pass
    else:
      toc=TOC_EC3.tocList[num]
      table.append([toc.ref,toc.name,toc.begin.page,toc.level])
      pass
    print(tabulate(table,headers=['Ref.','Name','Begin page','Level'], tablefmt='orgtbl'))
    pass
  pass

class PDFlocation():
  def __init__(self,page,begin=None,end=None):
    self.page=page
    if begin is None:
      self.begin=None
      self.end =None
    else:
      self.begin=int(begin)
      if end is None:
        self.end=int(begin)
      else:
        self.end=end
        pass
      pass
    pass
  pass

class toc():
  def __init__(self,ref,refsep,name,begin=None,end=None,level=None):
    self.ref=self.join(list(filter(lambda item: item, regex.split('\.*',ref))),refsep)
    self.name=name
    self.begin=begin
    self.end=end
    self.setLevel()
    pass
  def join(l, sep):
    out_str = ''
    for i, el in enumerate(l):
        out_str += '{}{}'.format(el, sep)
    return out_str
  def setLevel(self):
    self.level = len(list(filter(lambda item: item, regex.split('\.*',self.ref))))-1
    pass
  pass